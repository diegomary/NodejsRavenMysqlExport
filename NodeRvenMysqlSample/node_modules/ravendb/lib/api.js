// Generated by CoffeeScript 1.4.0
(function() {
  var Api, request, _;

  request = require('request');

  _ = require('underscore');

  Api = (function() {

    Api.IGNORE_HEADERS = ["Raven-Server-Build", "Non-Authoritative-Information", "Raven-Timer-Request", "Raven-Authenticated-User", "Access-Control-Allow-Origin", "Access-Control-Max-Age", "Access-Control-Allow-Methods", "Access-Control-Request-Headers", "Access-Control-Allow-Headers", "Reverse-Via", "Persistent-Auth", "Allow", "Content-Disposition", "Content-Encoding", "Content-Language", "Content-Location", "Content-MD5", "Content-Range", "Expires", "Last-Modified", "Content-Length", "Keep-Alive", "X-Powered-By", "X-AspNet-Version", "X-Requested-With", "X-SourceFiles", "Accept-Charset", "Accept-Encoding", "Accept", "Accept-Language", "Authorization", "Cookie", "Expect", "From", "Host", "If-Match", "If-Modified-Since", "If-None-Match", "If-Range", "If-Unmodified-Since", "Max-Forwards", "Referer", "TE", "User-Agent", "Accept-Ranges", "Age", "Allow", "ETag", "Location", "Retry-After", "Server", "Set-Cookie2", "Set-Cookie", "Vary", "Www-Authenticate", "Cache-Control", "Connection", "Date", "Pragma", "Trailer", "Transfer-Encoding", "Upgrade", "Via", "Warning"];

    function Api(datastoreUrl, databaseName) {
      this.datastoreUrl = datastoreUrl;
      this.databaseName = databaseName != null ? databaseName : "Default";
      this.authorization = null;
      this.proxy = null;
    }

    Api.prototype.getUrl = function() {
      var url;
      url = this.datastoreUrl;
      if (this.databaseName !== 'Default') {
        url += "/databases/" + this.databaseName;
      }
      return url;
    };

    Api.prototype.getDocsUrl = function() {
      return "" + (this.getUrl()) + "/docs";
    };

    Api.prototype.getDocUrl = function(id) {
      return "" + (this.getDocsUrl()) + "/" + id;
    };

    Api.prototype.getIndexesUrl = function() {
      return "" + (this.getUrl()) + "/indexes";
    };

    Api.prototype.getIndexUrl = function(index) {
      return "" + (this.getIndexesUrl()) + "/" + index;
    };

    Api.prototype.getTermsUrl = function(index, field) {
      return "" + (this.getUrl()) + "/terms/" + index + "?field=" + field;
    };

    Api.prototype.getStaticUrl = function() {
      return "" + (this.getUrl()) + "/static";
    };

    Api.prototype.getAttachmentUrl = function(id) {
      return "" + (this.getStaticUrl()) + "/" + id;
    };

    Api.prototype.getQueriesUrl = function() {
      return "" + (this.getUrl()) + "/queries";
    };

    Api.prototype.getBulkDocsUrl = function() {
      return "" + (this.getUrl()) + "/bulk_docs";
    };

    Api.prototype.getBulkDocsIndexUrl = function(index, query) {
      return "" + (this.getBulkDocsUrl()) + "/" + index + "?query=" + (this.luceneQueryArgs(query));
    };

    Api.prototype.getStatsUrl = function() {
      return "" + (this.getUrl()) + "/stats";
    };

    Api.prototype.setAuthorization = function(authValue) {
      return this.authorization = authValue;
    };

    Api.prototype.setBasicAuthorization = function(username, password) {
      var user_pwd;
      user_pwd = new Buffer("" + username + ":" + password).toString('base64');
      return this.setAuthorization("Basic " + user_pwd);
    };

    Api.prototype.setProxy = function(proxyUrl) {
      return this.proxy = proxyUrl;
    };

    Api.prototype.getIgnoreHeaders = function() {
      return Api.IGNORE_HEADERS;
    };

    Api.prototype.getIgnoreHeadersLowerCase = function() {
      if (this.ignoreHeadersLowerCase == null) {
        this.ignoreHeadersLowerCase = _.map(this.getIgnoreHeaders(), function(header) {
          return header.toLowerCase();
        });
      }
      return this.ignoreHeadersLowerCase;
    };

    Api.prototype.filterHeaders = function(response) {
      var key, value;
      response.headers = _.omit(response.headers, this.getIgnoreHeadersLowerCase());
      if ((function() {
        var _ref, _results;
        _ref = response.headers;
        _results = [];
        for (key in _ref) {
          value = _ref[key];
          _results.push(key.substring(0, 4) === "temp");
        }
        return _results;
      })()) {
        delete response.headers[key];
      }
    };

    Api.prototype.luceneQueryArgs = function(query) {
      var key, pairs, value;
      if (query == null) {
        return null;
      }
      pairs = [];
      for (key in query) {
        value = query[key];
        pairs.push("" + key + ":" + value);
      }
      return pairs.join('+');
    };

    Api.prototype.useRavenHq = function(apiKey, cb) {
      return request.get({
        uri: this.getDocsUrl()
      }, function(err, denied) {
        return request.get({
          uri: denied.headers['oauth-source'],
          headers: {
            "Api-Key": apiKey
          }
        }, function(err, oauth) {
          var authorizationHeaderValue;
          authorizationHeaderValue = "Bearer " + oauth.body;
          if (cb != null) {
            return cb(err, authorizationHeaderValue);
          }
        });
      });
    };

    Api.prototype.get = function(url, headers, cb) {
      if (typeof headers === 'function') {
        cb = headers;
        headers = {};
      }
      return this.makeRequest('get', url, null, headers, function(error, response) {
        return cb(error, response);
      });
    };

    Api.prototype.put = function(url, body, headers, cb) {
      if (typeof headers === 'function') {
        cb = headers;
        headers = {};
      }
      return this.makeRequest('put', url, body, headers, function(error, response) {
        return cb(error, response);
      });
    };

    Api.prototype.post = function(url, body, headers, cb) {
      if (typeof headers === 'function') {
        cb = headers;
        headers = {};
      }
      return this.makeRequest('post', url, body, headers, cb);
    };

    Api.prototype.patch = function(url, body, headers, cb) {
      if (typeof headers === 'function') {
        cb = headers;
        headers = {};
      }
      return this.makeRequest('patch', url, body, headers, cb);
    };

    Api.prototype["delete"] = function(url, body, headers, cb) {
      if (typeof body === 'function') {
        cb = body;
        body = null;
        headers = {};
      } else if (typeof headers === 'function') {
        cb = headers;
        headers = {};
      }
      return this.makeRequest('delete', url, body, headers, cb);
    };

    Api.prototype.makeRequest = function(verb, url, bodyOrReadableStream, headers, cb) {
      var op, req, requestHeaders,
        _this = this;
      verb = verb.toLowerCase();
      switch (verb) {
        case 'get':
          op = request.get;
          break;
        case 'put':
          op = request.put;
          break;
        case 'post':
          op = request.post;
          break;
        case 'delete':
          op = request.del;
          break;
        case 'patch':
          throw new Error('request module does not yet support patch verb');
          break;
        default:
          throw new Error('No operation matched the verb "' + verb(+'"'));
      }
      requestHeaders = _.clone(headers);
      if (this.authorization != null) {
        requestHeaders.Authorization = this.authorization;
      }
      req = {
        uri: url,
        headers: requestHeaders
      };
      if (this.proxy != null) {
        req['proxy'] = this.proxy;
      }
      if (bodyOrReadableStream != null) {
        if (bodyOrReadableStream.readable != null) {
          bodyOrReadableStream.pipe(op.call(request, req, cb));
          return;
        }
        if (typeof bodyOrReadableStream === 'object') {
          if (req.headers['content-type'] == null) {
            req.headers['content-type'] = 'application/json; charset=utf-8';
          }
          req.body = JSON.stringify(bodyOrReadableStream);
        } else {
          req.body = bodyOrReadableStream;
        }
      }
      op.call(request, req, function(error, response) {
        if (error != null) {
          cb(error, response);
          return;
        }
        _this.filterHeaders(response);
        return cb(error, response);
      });
    };

    return Api;

  })();

  module.exports = Api;

}).call(this);
