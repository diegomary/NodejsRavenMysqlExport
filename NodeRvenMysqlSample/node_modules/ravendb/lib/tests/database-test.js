// Generated by CoffeeScript 1.4.0
(function() {
  var assert, databaseOperations, fs, helpers, ravendb, remoteDatastore, testino;

  testino = require('testino');

  assert = require('assert');

  fs = require('fs');

  helpers = require('./helpers');

  ravendb = require('../ravendb');

  remoteDatastore = {
    defaultDatabase: ravendb('http://example.com'),
    foobarDatabase: ravendb('http://example.com', 'foobar')
  };

  module.exports = databaseOperations = testino.createFixture('Database Operations');

  databaseOperations.tests = {
    'should get a document using docs resource with the doc id': function() {
      var db;
      db = ravendb();
      helpers.mockApiCalls(db);
      return db.getDocument('users/tony', function(err, doc) {
        assert.equal(doc.verb, 'get', 'getDocument should use HTTP GET');
        return assert.ok(/\/docs\/users\/tony/.test(doc.url), 'Url should contain "/docs/{id}"');
      });
    },
    'should get the Collections list by using the terms resource against the Raven/DocumentsByEntityName index to retrieve the unique Tag values': function() {
      var db;
      db = ravendb();
      helpers.mockApiCalls(db);
      return db.getCollections(function(err, doc) {
        assert.equal(doc.verb, 'get', 'getCollections should use HTTP GET');
        return assert.ok(/\/terms\/Raven\/DocumentsByEntityName\?field=Tag/.test(doc.url), 'Url should contain "/terms/Raven/DocumentsByEntityName?field=Tag" but was "' + doc.url + '"');
      });
    },
    'should return the Key and E-Tag of the document when successfully saved': function() {
      var basicResponseBody, db, mockResponse;
      db = ravendb();
      basicResponseBody = {
        Key: "users/tony",
        ETag: "00000000-0000-0900-0000-000000000016"
      };
      mockResponse = {
        statusCode: 201,
        body: JSON.stringify(basicResponseBody)
      };
      helpers.mockApiCalls(db, 201, mockResponse);
      return db.saveDocument('Users', {
        id: 'users/tony',
        firstName: 'Tony',
        lastName: 'Heupel'
      }, function(e, r) {
        var metadata;
        metadata = r['@metadata'];
        assert.equal(metadata.key, basicResponseBody.Key, "@metadata/key should be set properly");
        return assert.equal(metadata.etag, basicResponseBody.ETag, "@metadata/etag should be set properly");
      });
    },
    'should return an error when there is an error on the call': function() {
      var db, mockResponse;
      db = ravendb();
      mockResponse = {
        statusCode: 500,
        body: "{ Error: 'ERROR', Message: 'There was an error' }"
      };
      helpers.mockApiCalls(db, 500, mockResponse);
      return db.saveDocument('Users', {
        id: 'users/tony',
        firstName: 'Tony',
        lastName: 'Heupel'
      }, function(e, r) {
        return assert.deepEqual(e, new Error(mockResponse.body));
      });
    },
    'should put to the static resource when saving an attachment': function() {
      var content, db, docId, headers;
      db = ravendb();
      helpers.mockApiCalls(db, 201);
      docId = "javascripts/alert.js";
      content = "alert('hi')";
      headers = {
        'Content-Type': 'text/javascript'
      };
      return db.saveAttachment(docId, content, headers, function(err, doc) {
        assert.equal(doc.verb, 'put');
        assert.ok(/\/static\/javascripts\/alert.js/.test(doc.url));
        return assert.equal(doc.body, "alert('hi')");
      });
    },
    'should work with a ReadableStream as the bodyOrReadableStream parameter': function() {
      var db, docId, readableStream;
      db = ravendb();
      helpers.mockApiCalls(db, 201);
      docId = "images/foobar.jpg";
      readableStream = fs.createReadStream("" + __dirname + "/tony.jpeg");
      return db.saveAttachment(docId, readableStream, function(err, doc) {
        var body, stream;
        body = doc.body.replace(/\n/g, "");
        return stream = JSON.parse(body).body;
      });
    },
    'should handle a non-JSON response when receiving an error on saveDocument': function() {
      var body, db, status;
      db = ravendb();
      body = "<html><title>Permission Denied</title><body>You shall not pass!</body></html>";
      status = 401;
      helpers.mockApiCalls(db, status, {
        statusCode: status,
        body: body
      });
      return db.saveDocument(null, {
        id: 'some_id',
        value: 'some value'
      }, function(err, resp) {
        assert.equal(null, resp);
        return assert.equal(err.message, "Unable to create document: " + status + " - " + body);
      });
    },
    'should handle a non-JSON response when receiving an error on getDocumentCount': function() {
      var body, db, status;
      db = ravendb();
      body = "<html><title>Permission Denied</title><body>You shall not pass!</body></html>";
      status = 401;
      helpers.mockApiCalls(db, status, {
        statusCode: status,
        body: body
      });
      return db.getDocumentCount(null, function(err, resp) {
        assert.equal(null, resp);
        return assert.equal(err.message, "Unable to get document count: " + status + " - " + body);
      });
    },
    'A non-default Database object should have a base url that includes the database resource and the database name': function() {
      var db;
      db = ravendb(null, 'foobar');
      return assert.ok(/\/databases\/foobar/.test(db.getUrl()), 'Database url should contain "/databases/{databasename}"');
    },
    'A remote Database object should have a base url that matches the datastore url for the default database': function(datastore) {
      return assert.equal(remoteDatastore.defaultDatabase.getUrl(), 'http://example.com');
    },
    'A remote Database object should have a base url that matches the datastore url with the databases resource': function(datastore) {
      return assert.equal(remoteDatastore.foobarDatabase.getUrl(), 'http://example.com/databases/foobar');
    }
  };

  if (require.main === module) {
    console.log(module.exports.run());
  }

}).call(this);
