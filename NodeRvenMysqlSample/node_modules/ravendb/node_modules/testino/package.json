{
  "name": "testino",
  "version": "0.0.3",
  "author": {
    "name": "Tony Heupel",
    "email": "tony@heupel.net",
    "url": "tchype"
  },
  "contributors": [],
  "main": "testino.js",
  "bin": {
    "testino": "./testino.js"
  },
  "scripts": {
    "test": "node ./test/testino_test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/tchype/testino.git"
  },
  "dependencies": {
    "glob": ">=3.1.1",
    "argparse": ">=0.1.1"
  },
  "readme": "testino\n=======\n\"small test\" for node\n\nA small test runner for a simple, small test framework.  Because, hey, everyone writes a test framework in node, right?\n\nReally, I just wanted to see what I could do in a day or two.  I'm currently using it in [node-ravendb](http://github.com/tchype/node-ravend) for two reasons:\n1. vows was not catching non-AssertionError errors in the code\n1. I didn't want to use anything very big--I don't have that many tests\n\n\nApproach\n--------\nKeep things small (the main testino module is around 300 lines of code) and simple, support the assert module.\nOther than that, a few simple things:\n1. Each test fixture is created using testino.createFixture and then adding a tests member to that object\n2. You simply add a *tests* object as a member of the fixture, and each function is considered a test case\n3. Each test module should export the test fixture as it's *module.exports* and optionally consider adding a code snippet to run the tests if the file is run directly\n\n*Bonus*: Since this is JavaScript, tests members can have a name that is a string, not just a legal function name, so have fun with spec-style test names!\n\nThese points are demonstrated in the *Usage* section below.\n\nUsage\n-----\n```js\nvar testino = require('testino');\nvar assert = require('assert');\n\nmodule.exports = sampleTester = testino.createFixture('Sample Tester');\n\nsampleTester.tests = {\n  thingsAreWiredUp: function() {\n    assert.ok(true, 'just making sure things are wired up');\n  },\n\n  'we can use string names for methods too!': function() {\n    assert.ok(true, 'see, this is easy!');\n  },\n\n  thisTestShouldFail: function() {\n    var actual = expected = null;\n    assert.fail(actual, expected, 'this test failed on purpsose');\n  },\n\n  'tests with unexpected errors end up in the \"Other\" category': function () {\n    throw new Error(\"This result should end up in the Other category\");\n  }\n};\n\n// If the file is run directly, just run the test fixture with default output\nif (require.main === module) console.log(module.exports.run());\n```\n\nand the output is:\n```shell\n$ node sample-test.js\nTEST RESULTS FOR Sample Tester    Total: 4\n    Passed: 2    Failed: 1    Other (unknown): 1\n\n  FAILED test details:\n        thisTestShouldFail              AssertionError: this test failed on purpsose\n\n\n  OTHER test details:\n        tests with unexpected errors end up in the \"Other\" category             Error: This result should end up in the Other category\n```\n\n&copy; 2013 Tony Heupel\n",
  "readmeFilename": "README.md",
  "_id": "testino@0.0.3",
  "description": "testino ======= \"small test\" for node",
  "dist": {
    "shasum": "42a484b6219f3d2d0260137ebddf024c50ea0d6e",
    "tarball": "http://registry.npmjs.org/testino/-/testino-0.0.3.tgz"
  },
  "_npmVersion": "1.1.69",
  "_npmUser": {
    "name": "tchype",
    "email": "tony@heupel.net"
  },
  "maintainers": [
    {
      "name": "tchype",
      "email": "tony@heupel.net"
    }
  ],
  "directories": {},
  "_shasum": "42a484b6219f3d2d0260137ebddf024c50ea0d6e",
  "_from": "testino@>=0.0.3",
  "_resolved": "https://registry.npmjs.org/testino/-/testino-0.0.3.tgz"
}
